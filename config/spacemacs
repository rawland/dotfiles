;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  (setq-default

   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()

   dotspacemacs-configuration-layers
   '(
     (auto-completion
      :variables
      auto-completion-enable-snippets-in-popup t
      auto-completion-return-key-behavior nil
      auto-completion-tab-key-behavior 'cycle
      ;auto-completion-private-snippets-directory "~/.spacemacs.d/snippets/"
      auto-completion-enable-help-tooltip 'manual
      :disabled-for org erc)
     better-defaults
     (c-c++ :variables c-c++-enable-clang-support t)
     clojure
     command-log
     csv
     elfeed
     emacs-lisp
     emoji
     erc
     ess
     (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t)
     fasd
     git
     github
     gtags
     haskell
     html
     (ibuffer :variables ibuffer-group-buffers-by nil)
     latex
     lua
     markdown
     (org :disabled-for ess)
     pdf-tools
     (python :variables python-test-runner 'pytest)
     (ranger :variables ranger-override-dired t)
     ruby
     rust
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
            ;shell-default-shell 'eshell)
     search-engine
     scheme
     (semantic :disabled-for emacs-lisp)
     (shell :variables shell-default-shell 'eshell)
     shell-scripts
     slack
     (spell-checking :variables spell-checking-enable-by-default nil)
     spotify
     (syntax-checking :variables syntax-checking-enable-by-default nil)
     systemd
     (sql :variables sql-capitalize-keywords t)
     typography
     (version-control :variables version-control-diff-tool 'diff-hl)
     vimscript
     yaml
     )
   dotspacemacs-additional-packages
   '(
     sublimity
     avk-emacs-themes
     color-theme-sanityinc-tomorrow
     defproject
     helm-flycheck
     )
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 10
   dotspacemacs-check-for-update nil
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'nil
   dotspacemacs-startup-lists '(bookmarks (recents . 10) projects)
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(sanityinc-tomorrow-day
                         sanityinc-tomorrow-blue
                         ;flatui
                         ;heroku (TODO)
                         ;leuven
                         ;gandalf
                         )
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Iosevka Term Medium"
                               :size 18
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-remap-Y-to-y$ nil         ;TODO
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-visual-line-move-text t
   dotspacemacs-ex-substitute-global t
   dotspacemacs-default-layout-name "Home"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-generate-layout-names t
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-large-file-size 1
   dotspacemacs-max-rollback-slots 10
   dotspacemacs-helm-resize t
   dotspacemacs-helm-no-header t
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-enable-paste-transient-state t
   dotspacemacs-which-key-delay 0.5
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-switch-to-buffer-prefers-purpose nil
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-unicode-symbols nil
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers 'nil
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'changed
   dotspacemacs-pretty-docs t))

(defun dotspacemacs/user-init ()
  (setq-default

   ;; Miscellaneous
   vc-follow-symlinks t
   ring-bell-function 'ignore
   require-final-newline t
   indent-tabs-mode nil
   system-time-locale "C"
   paradox-github-token t
   open-junk-file-find-file-function 'find-file
   read-quoted-char-radix 16
   custom-file (concat dotspacemacs-directory "custom.el")

   ;; Theming
   ;monokai-highlight-line "#3A3A3A"

   ;; Backups
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   make-backup-files nil

   ;; Documentation
   spacemacs-space-doc-modificators
   '(org-indent-mode
     alternative-tags-look
     link-protocol
     org-kbd-face-remap
     resize-inline-images)

   ;; Evil
   evil-shift-round nil

   ;; Whitespace mode
   whitespace-style '(face tabs tab-mark newline-mark)
   whitespace-display-mappings
   '((newline-mark 10 [172 10])
     (tab-mark 9 [9655 9]))

   ;; Magit
   magit-popup-show-common-commands nil
   magit-gh-pulls-pull-detail-limit 200
   magit-bury-buffer-function 'magit-mode-quit-window

   ;; Flycheck
   flycheck-check-syntax-automatically '(save mode-enabled)

   ;; Avy
   avy-all-windows 'all-frames

   ;; Matlab
   ;matlab-auto-fill nil
   ;matlab-fill-code nil
   ;matlab-functions-have-end t
   ;matlab-indent-function-body t

   ;; LaTeX
   font-latex-fontify-script nil
   TeX-newline-function 'reindent-then-newline-and-indent

   ;; Shell
   shell-default-term-shell "/bin/zsh"

   ;; Web
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 4

   ;; Emacs Lisp
   nameless-global-aliases
   '(("sm" . "spacemacs")
     ("dsm" . "dotspacemacs")
     ("cfl" . "configuration-layer")
     ("sl" . "spaceline")
     ("et" . "evil-targets")
     ("eip" . "evil-indent-plus"))
   nameless-discover-current-name nil
   nameless-prefix ""
   nameless-separator nil

   ;; Rust
   rust-indent-method-chain t

   ;; Elfeed
   elfeed-feeds
   '("https://www.reddit.com/r/emacs/.rss"
     "http://xkcd.com/rss.xml")
))
   ;; IRC
;   erc-server-list
;   `(("efonn.no" :port 1025 :nick "TheBB" :password ,(format "TheBB/freenode:%s" bb/znc-pwd)))
;   erc-ignore-list
;   '("Orestotlra" "Anwellyin" "GWILIESEN" "Howdeshell" "Otsuka" "MALIK" "xXgulbragurXx13" "Clytaemnus"
;     "Glass" "GEIRSKLA" "AlsTEinnhr" "Lenunnono011" "MaRzLa" "Bohnert")))

(defun dotspacemacs/user-config ()
  (setq-default
   tab-width 4
   evil-move-beyond-eol nil
   helm-echo-input-in-header-line nil)

  ;; Semantic
  (with-eval-after-load 'semantic
    (setq semantic-default-submodes
          (remove 'global-semantic-stickyfunc-mode semantic-default-submodes))
    (setq semantic-default-submodes
          (remove 'global-semantic-idle-scheduler-mode semantic-default-submodes)))

  ;; Diminish
  (spacemacs|diminish holy-mode)
  (spacemacs|diminish hybrid-mode)
  (spacemacs|diminish which-key-mode)
  (spacemacs|diminish evil-mc-mode)
  (spacemacs|diminish helm-gtags-mode)
  (spacemacs|diminish ggtags-mode)
  (with-eval-after-load 'emoji-cheat-sheet-plus
    (diminish 'emoji-cheat-sheet-plus-display-mode))
  (with-eval-after-load 'racer
    (diminish 'racer-mode))
  (with-eval-after-load 'command-log-mode
    (diminish 'command-log-mode))

  ;; Disable smartparens highlighting
  (with-eval-after-load 'smartparens
    (show-smartparens-global-mode -1))

  ;; Thanks StreakyCobra
  (evil-set-initial-state 'term-mode 'emacs)
  (evil-set-initial-state 'calculator-mode 'emacs)
  (push 'term-mode evil-escape-excluded-major-modes)
  (evil-define-key 'emacs term-raw-map (kbd "C-c") 'term-send-raw)

  (add-hook 'inferior-emacs-lisp-mode-hook 'smartparens-mode)

  ;; Evilification
  (with-eval-after-load 'haskell-interactive-mode
    (evilified-state-evilify-map haskell-error-mode-map
      :mode haskell-error-mode))
  (with-eval-after-load 'proced
    (evilified-state-evilify-map proced-mode-map
      :mode proced-mode))

  ;; neotree - nerdtree:
  (setq neo-smart-open t) ;; selects current file on open
  (setq projectile-switch-project-action 'neotree-projectile-action) ;; work with projectile

  ;; org-mode config:
  
  (setq org-directory "/home/rawland/src/life.wiki/orgmode")
  (setq org-default-notes-file "/home/rawland/src/life.wiki/orgmode/refile.org")

  ;; org-mode templates:
  (setq org-capture-templates
        ;; TODO: This sucks, rework it:
      (quote (("t" "todo" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* TODO %?\n%U\n%a\n")
              ("r" "respond" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n")
              ("n" "note" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* %? :NOTE:\n%U\n%a\n")
              ("j" "Journal" entry (file+datetree "/home/rawland/src/life.wiki/orgmode/journal-life.org")
               "* %?\n%U\n")
              ("w" "org-protocol" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* MEETING with %? :MEETING:\n%U")
              ("p" "Phone call" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* PHONE %? :PHONE:\n%U")
              ("h" "Habit" entry (file "/home/rawland/src/life.wiki/orgmode/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

  (setq org-log-into-drawer t)

  ;; TODO: This sucks, rework it:
  ;;'(org-agenda-files (list "~/src/life.wiki/orgmode/blank_slate.org"
  ;;                        "~/src/life.wiki/orgmode/table.org"
  ;;                        "~/src/life.wiki/orgmode/diary.org"
  ;;                        "~/src/life.wiki/orgmode/learning.org"))
  ;; org-mode
  ;; (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))

  ;; powerline config
  (setq powerline-default-separator 'arrow)

  ;; < and > indent by this many chars
  (setq-default evil-shift-width 2)

  ;; Always indent with spaces, never tabs
  (setq-default indent-tabs-mode nil)

  ;; indent with 2 spaces
  (setq-default tab-width 2)
  (defvaralias 'sh-basic-offset 'tab-width)
  (defvaralias 'sh-indentation 'tab-width)
  (defvaralias 'rust-indent-offset 'tab-width)
  (defvaralias 'js-indent-level 'tab-width)

  ;; 80 colums for wrapping
  ;;(setq-default fill-column 80)
  ;; Hard-wrap at 80 columns on for _everything_
  ;;(setq-default auto-fill-function 'do-auto-fill)

  ;; Soft-wrap (visual wrap) always for long lines that don't fit on the screen
  (global-visual-line-mode 1)

  ;; Ensure that soft-wrap uses markers to show a line was wrapped
  ;;(setq-default visual-line-fringe-indicators
  ;;              '(left-curly-arrow right-curly-arrow))

  ;; Why the fuck would I EVER want my mouse scrolling to _accelerate_? Who in
  ;; their right fucking mind came up with this bullshit...
  (setq-default mouse-wheel-progressive-speed nil)

  ;; Removes silly .#<name> lock files. Unfortunately there's no way to move
  ;; these to a tmp folder; we can only have them in the same folder as the file
  ;; being edited (zero chance of that) or not have them.
  (setq-default create-lockfiles nil)

  ;; Emacs autosave files (".#<name>") and backup files ("<name>~") go into the
  ;; temp dir, not the dir where the file being edited is located.
  (setq-default backup-directory-alist
                `((".*" . ,temporary-file-directory)))
  (setq-default auto-save-file-name-transforms
                `((".*" ,temporary-file-directory t)))

  ;; Sentences do not end with two spaces.
  (setq sentence-end-double-space nil)

  ;; Min number of lines to keep below/above the cursor in view.
  (setq-default scroll-margin 3)

  ;; Chrome as default browser
  (setq-default browse-url-browser-function 'browse-url-generic
                browse-url-generic-program "chromium-browser")

  ;; Highlight all function calls in all programming modes.
  (add-hook 'prog-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\\([_a-zA-Z][_a-zA-Z0-9]*\\)!?(" 1 'font-lock-function-name-face)))
              ))

  ;; *.zsh files now use sh-mode as major mode
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))

  ;; The below defadvice calls modify searching with '/' so that it recenters
  ;; the screen after each jump.
  (defadvice
      evil-search-forward
      (after evil-search-forward-recenter activate)
    (recenter))
  (ad-activate 'evil-search-forward)

  (defadvice
      evil-search-next
      (after evil-search-next-recenter activate)
    (recenter))
  (ad-activate 'evil-search-next)

  (defadvice
      evil-search-previous
      (after evil-search-previous-recenter activate)
    (recenter))
  (ad-activate 'evil-search-previous)

  ;; Makes emacs write "customization" changes (which I never use) into a
  ;; separate file and not this one. Also prevent errors if that file doesn't
  ;; exist.
  ;(setq custom-file "~/.emacs.d/custom.el")
  ;(load custom-file 'noerror)

  ;; Turn on tildes as markers for end of file.
  ;(global-vi-tilde-fringe-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; PLUGIN CONFIG
;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Helm config
  ;;(setq-default helm-mode-fuzzy-match t)
  ;;(setq-default helm-completion-in-region-fuzzy-match t)

  ;; Workaround to force fci-mode on globally.
  ;; (define-globalized-minor-mode global-fci-mode fci-mode
  ;;   (lambda () (fci-mode 1)))
  ;; (global-fci-mode 1)
  ;;  fill-column-indicator (visual indicator line at 80 colums) config
  ;; (setq-default fci-rule-color "#3B3A32")

  ;; Set up operator highlight.
;; disabled for now
;;  (add-hook 'prog-mode-hook
;;            (lambda ()
;;              (highlight-operators-mode 1)
;;              ;; HAS to be set here and not in custom-set-faces because that
;;              ;; doesn't work. Don't know why, don't care much either.
;;              (set-face-foreground 'highlight-operators-face "cyan")
;;              ))
;;  (add-hook 'emacs-lisp-mode-hook (lambda () (highlight-operators-mode -1)))
;;  (add-hook 'json-mode-hook (lambda () (highlight-operators-mode -1)))
;;
;;  ;;(custom-set-faces
;;  ;; ;; All parens/braces/brackets start with cyan color; further nesting changes
;;  ;; ;; color.
;;  ;; '(rainbow-delimiters-depth-1-face ((t (:foreground "cyan"))))
;;  ;; '(web-mode-css-property-name-face ((t (:foreground "#68A145"))))
;;  ;; )
;;
;;  ;; Rainbow mode! (CSS color declarations use the color background.)
;;  (add-hook 'css-mode-hook 'rainbow-mode)
;;  (add-hook 'html-mode-hook 'rainbow-mode)
;;  (add-hook 'scss-mode-hook 'rainbow-mode)
;;  (add-hook 'less-mode-hook 'rainbow-mode)
;;  (add-hook 'emacs-lisp-mode-hook 'rainbow-mode)
;;
;;  ;; Turn off minor modes token list in modeline.
;;  (spaceline-toggle-minor-modes-off)
;;
;;  ;; Enable flycheck (syntastic equiv).
;;  ;; (global-flycheck-mode)
;;  ;; (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
;;  ;; (set-variable 'flycheck-display-errors-delay 0.4)
;;
;;  (add-hook 'python-mode-hook
;;            (lambda ()
;;              ;; Python-mode overrides our indent settings
;;              (setq python-indent 2)
;;              ;; I don't know why emacs-ycmd sets up ycmd for python syntax
;;              ;; checking; ycmd doesn't support it! (I'd know.)
;;              (add-to-list 'flycheck-disabled-checkers 'ycmd)))
;;
;;  ;; Turn on git commit syntax highlighting.
;;  (global-git-commit-mode)
;;  ;; Always spell-check for commit messages.
;;  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
;;  ;; Don't save cursor position in git commit messages, it's never useful.
;;  (add-hook 'git-commit-mode-hook (lambda () (toggle-save-place 0)))

)

(when (file-exists-p "~/local.el")
  (load "~/local.el"))

(defun dotspacemacs/emacs-custom-settings ())
