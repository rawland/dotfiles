"" Basic Functionality
call pathogen#runtime_append_all_bundles()          " pathogen
call pathogen#helptags()
filetype plugin indent on       " load file type plugins + indentation


"" General vim options
set nocompatible
set showcmd                     " display incomplete commands
set autoindent                  " keep indent, when indented
set scrolloff=3                 " min lines above or below cursor
set visualbell                  " I hate the acoustic bell
set cursorline                  " highlight current line
set nobackup                    " git/hg
set nowb
set noswapfile                  " No swafile because git/hg
set relativenumber              " show line numbers from current line to calc distances
set wildmenu                    " autocompletion
set wildmode=list:longest       " show all
set guioptions-=T               " don't show toolbar
au FocusLost * :wa              " Save on lost focus

set undodir=~/.vim_runtime/undodir
set undofile                    " creates a <FILENAME>.un~ for eternal editing


"" Hande lines
set encoding=utf-8
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85
set wrapmargin=79
"" Whitespace
"set nowrap                      " don't wrap lines
"set wrap
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode


"" Look and feel
syntax enable
set background=dark
let g:solarized_contrast="high"    "default value is normal
let g:solarized_visibilty="high"
let g:solarized_termtrans=1
let g:solarized_termcolors=256
colorscheme solarized
set splitright                  " split windows always vertically
set t_Co=256                    " Explicitly tell vim terminal features

function ToggleBackgroundColor()
  if (&background == 'light')
    set background=dark
    echo "background -> dark"
  else
    set background=light
    echo "background -> light"
  endif
endfunction


"" Searching
noremap / /\v
vnoremap / /\v
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter`

set gdefault                    " replacing globally is default
set hlsearch                    " highlight matches
set showmatch                   " show matches
set incsearch                   " incremental searching

""clear search, it looks ugly:
map <silent> <leader><space> :noh<cr>

"" Window movement
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

"" Buffers
map <leader>bd :Bclose<cr>
map <leader>cd :cd %:p:h<cr>
nmap <leader>w :w!<cr>
map <right> :bn<cr>
map <left> :bp<cr>

"" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove


command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

"" Change keyboard shortcuts
let mapleader = ','
nnoremap <leader>e <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <F9>  :call ToggleBackgroundColor()<CR>

"" Tagbar plugin
let g:taskbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>


"" vimorganizer:
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org 
au BufEnter *.org            call org#SetOrgFileType()
let g:org_command_for_emacsclient = 'emacsclient'


function! OrgCustomColors()
    hi! Org_Drawer guifg=#586e75 ctermfg=magenta
    hi! Org_Drawer_Folded guifg=#586e75 ctermfg=magenta gui=bold cterm=bold
    hi! Org_Property_Value guifg=#657b83 ctermfg=magenta
    hi! Org_Block guifg=#586375 ctermfg=magenta
    hi! Org_Date guifg=#657b83 ctermfg=magenta gui=underline cterm=underline
endfunction

"" Utl
let g:utl_cfg_hdl_scm_http="silent !chromium-browser '%u#%f' &" 

"" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*   " for Linux/MacOSX
"set wildignore+=.git\*,.hg\*,.svn\*         " for Windows

let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\.git$\|\.hg$\|\.svn$',
"   \ 'file': '\.exe$\|\.so$\|\.dll$',
"   \ 'link': 'some_bad_symbolic_links',
"   \ }

"" Powerline
set laststatus=2
let g:Powerline_symbols= 'unicode'

"" Rainbow parentheses
map <leader>r :RainbowParenthesesToggle<cr>
