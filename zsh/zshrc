export ZSH=$HOME/.oh-my-zsh

# PATH, because else, zsh plugins fail...
# Customize to your needs...
export PATH=$PATH:/usr/local/bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:$HOME/dotfiles/bin

# Enhance system by local
export PATH=$HOME/local/bin:$PATH
export INCLUDE=$HOME/local/include:$INCLUDE
export PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH
export MANPATH=$HOME/local/share/man:$MANPATH

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="rawland"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
#plugins=(git colorize colored-man-pages lol command-not-found gnu-utils history-substring-search compleat zsh-syntax-highlighting zsh-autosuggestions)
plugins=(cp git colorize autojump colored-man-pages command-not-found gnu-utils history-substring-search desk)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
export PATH=$PATH:/usr/local/bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:$HOME/dotfiles/bin

# Enhance system by local
export PATH=$HOME/local/bin:$PATH
export INCLUDE=$HOME/local/include:$INCLUDE
export PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH
export MANPATH=$HOME/local/share/man:$MANPATH

# Python
export PYTHONPATH=$HOME/.local/lib/site-python
export PATH=$PATH:$HOME/.local/bin
# Go
export GOPATH=$HOME/local/src/go
export PATH=$PATH:$GOPATH/bin


# Terminal 256 colors:
export TERM="xterm-256color"
export _Z_NO_RESOLVE_SYMLINKS="true"
export EDITOR="vim"

vman() { man $* | col -b | vim -c 'set ft=man nomod nolist' -; }
alias vman='vman'
alias zmv='noglob zmv -W'

# Common exports:
export TERM="xterm-256color"
export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'
export CLICOLOR=1
export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
export LC_CTYPE=en_US.utf-8
export LESS=FRSX
export FIGNORE=$FIGNORE:.hi:.pyc:.o
export IGNOREEOF=2

bindkey -v

# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

# Ignore duplicates
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

# CTRL-SPACE accept autosuggestion:
bindkey '^ ' autosuggest-accept

alias mmv='noglob zmv -W'
alias l='ls'

# RZ Cluster specific:
if [ -n $WORK ]; then
  if [[ $WORK == "/work/rs169182" ]]; then

    export HOSTTYPE="rzbull"
    export PATH=$PATH:/home/sw_cats/bin
    export OMPI_MCA_hwloc_base_report_bindings=0
  fi
fi

alias ls='ls --color -h --group-directories-first'

# because I prefer gitgoodies:
unalias gg

# fasd-er!
alias c='fasd_cd -d'

# Copy and paste
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

# ranger
function ranger-cd {
    tempfile="$(mktemp)"
    ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
    test -f "$tempfile" &&

    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi

    rm -f -- "$tempfile"
}

# This binds Ctrl-O to ranger-cd:
zle -N ranger-cd
bindkey '^o' ranger-cd

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# location specific:
source ~/.zshrc_local

# taskwarrior GTD style:
alias in='task add +in pro:life'
alias rnd='task add +rnd +next +@computer +@online pro:life'
alias tta='task project:thesis add'

# my notes / seperate from (taskwarrior) actions:
LIFE=$HOME/src/life.wiki
note_ () {
  local id="$1"
  local dir="$LIFE/projects"
  local file="$dir/$id.md"

  mkdir -p $dir
  vim "$file"
}

alias n=note_

# taskwarrior, what's next/waiting - requires tasklib (py)
#fun () {
#    cat << EOF
#import tasklib
#tw = tasklib.TaskWarrior()
#result = set(tw.execute_command(["+PROJECT", "+PENDING", "+READY", "-waiting", "_projects"]))
#  - set(tw.execute_command(["+PENDING", "+next", "_projects"]))
#for i in result:
#    print(i)
#EOF
#}
#
#python -c "$(fun)"

# fireout above script:
#projects=$(projects_without_next_action.sh)
#if [ "$projects" != "" ]
#then
#  print_colored_text RED "Attention: The following projects don't currently have a next action:\n"
#  echo $projects
#  echo
#fi


## Uncomment this as soon, as you are comfortable:
# tickle () {
#     deadline=$1
#     shift
#     in +tickle wait:$deadline $@
# }
# alias tick=tickle
# alias think='tickle +1d'
# alias rnd='task add +rnd +next +@computer +@online'
# 
# webpage_title (){
#     wget -qO- "$*" | hxselect -s '\n' -c  'title' 2>/dev/null
# }
# 
# read_and_review (){
#     link="$1"
#     title=$(webpage_title $link)
#     echo $title
#     descr="\"Read and review: $title\""
#     id=$(task add +next +rnr "$descr" | sed -n 's/Created task \(.*\)./\1/p')
#     task "$id" annotate "$link"
# }
# 
# alias rnr=read_and_review

# Base16
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

source $HOME/.oh-my-git/prompt.sh
